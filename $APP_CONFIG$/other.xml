<application>
  <component name="AppInspectionProfilesVisibleTreeState">
    <entry key="Default">
      <profile-state>
        <expanded-state>
          <State>
            <id />
          </State>
          <State>
            <id>Spelling</id>
          </State>
        </expanded-state>
        <selected-state>
          <State>
            <id>Spelling</id>
          </State>
        </selected-state>
      </profile-state>
    </entry>
  </component>
  <component name="CodeStyleSchemes">
    <option name="CURRENT_SCHEME_NAME" value="Default" />
  </component>
  <component name="CppTools.Settings" gccPath="gcc" clangPath="clang" msvcdir="c:\Program Files\Microsoft Visual Studio .NET 2012\vc10" defines="WIN32;NDEBUG;_WINDOWS;_MBCS;_AFXDLL;_WIN32" launchGdbOnFailureCommand="/usr/X11/bin/xterm -e $gdb$ --directory=&quot;~/CF-C&quot;" gdbPath="gdb" />
  <component name="CvsApplicationLevelConfiguration">
    <option name="EXT_CONFIGURATION">
      <value>
        <option name="CVS_RSH" value="ssh" />
        <option name="PRIVATE_KEY_FILE" value="" />
        <option name="ADDITIONAL_PARAMETERS" value="" />
        <option name="USE_INTERNAL_SSH_IMPLEMENTATION" value="false" />
      </value>
    </option>
    <option name="SSH_CONFIGURATION">
      <value SSH_TYPE="SSH1, SSH2">
        <option name="USE_PPK" value="false" />
        <option name="PATH_TO_PPK" value="" />
      </value>
    </option>
    <option name="LOCAL_CONFIGURATION">
      <value>
        <option name="PATH_TO_CVS_CLIENT" value="cvs" />
      </value>
    </option>
    <option name="PROXY_SETTINGS">
      <value>
        <option name="USE_PROXY" value="false" />
        <option name="PROXY_HOST" value="" />
        <option name="PROXY_PORT" value="8080" />
        <option name="TYPE" value="0" />
        <option name="LOGIN" value="" />
        <option name="PASSWORD" value="" />
      </value>
    </option>
    <option name="SSH_FOR_EXT_CONFIGURATION">
      <value SSH_TYPE="SSH1, SSH2">
        <option name="USE_PPK" value="false" />
        <option name="PATH_TO_PPK" value="" />
      </value>
    </option>
    <option name="PATH_TO_PASSWORD_FILE" />
    <option name="TIMEOUT" value="10" />
    <option name="MAKE_CHECKED_OUT_FILES_READONLY" value="false" />
    <option name="CHECKOUT_PRUNE_EMPTY_DIRECTORIES" value="true" />
    <option name="CHECKOUT_KEYWORD_SUBSTITUTION" />
    <option name="SHOW_RESTORE_DIRECTORIES_CONFIRMATION" value="true" />
    <option name="ENCODING" value="Default" />
    <option name="USE_GZIP" value="false" />
    <option name="DO_OUTPUT" value="false" />
    <option name="SEND_ENVIRONMENT_VARIABLES_TO_SERVER" value="false" />
    <option name="SHOW_PATH" value="true" />
  </component>
  <component name="DebuggerSettings">
    <option name="TRACING_FILTERS_ENABLED" value="true" />
    <option name="FORCE_CLASSIC_VM" value="true" />
    <option name="SKIP_SYNTHETIC_METHODS" value="true" />
    <option name="SKIP_CLASSLOADERS" value="true" />
    <option name="RUN_HOTSWAP_AFTER_COMPILE" value="RunHotswapAlways" />
    <option name="COMPILE_BEFORE_HOTSWAP" value="true" />
    <filter>
      <option name="PATTERN" value="com.sun.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="java.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="javax.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="org.omg.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="sun.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="junit.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="com.intellij.rt.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="com.yourkit.runtime.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="com.springsource.loaded.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="org.springsource.loaded.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="kotlin.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="kotlin.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="kotlin.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="kotlin.*" />
      <option name="ENABLED" value="true" />
    </filter>
    <filter>
      <option name="PATTERN" value="kotlin.*" />
      <option name="ENABLED" value="true" />
    </filter>
  </component>
  <component name="ErrorReportConfigurable">
    <option name="ITN_LOGIN" value="" />
    <option name="ITN_PASSWORD_CRYPT" value="" />
    <option name="KEEP_ITN_PASSWORD" value="false" />
    <option name="EMAIL" value="" />
  </component>
  <component name="JavaFxSettings">
    <option name="pathToSceneBuilder" value="$USER_HOME$/Desktop/misc/JavaFX Scene Builder 2.0.app" />
    <option name="myPathToSceneBuilder" value="$USER_HOME$/Desktop/misc/JavaFX Scene Builder 2.0.app" />
  </component>
  <component name="PsiViewer.Settings">
    <option name="HIGHLIGHT_COLOR" value="162 3 229 32" />
    <option name="PLUGIN_ENABLED" value="true" />
  </component>
  <component name="PsiViewerSettings">
    <option name="type" value="ANTLR v4 grammar file file" />
    <option name="text" value="/*&#10; * [The &quot;BSD license&quot;]&#10; *  Copyright (c) 2013 Terence Parr&#10; *  Copyright (c) 2013 Sam Harwell&#10; *  All rights reserved.&#10; *&#10; *  Redistribution and use in source and binary forms, with or without&#10; *  modification, are permitted provided that the following conditions&#10; *  are met:&#10; *&#10; *  1. Redistributions of source code must retain the above copyright&#10; *     notice, this list of conditions and the following disclaimer.&#10; *  2. Redistributions in binary form must reproduce the above copyright&#10; *     notice, this list of conditions and the following disclaimer in the&#10; *     documentation and/or other materials provided with the distribution.&#10; *  3. The name of the author may not be used to endorse or promote products&#10; *     derived from this software without specific prior written permission.&#10; *&#10; *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR&#10; *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES&#10; *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.&#10; *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,&#10; *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT&#10; *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,&#10; *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY&#10; *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#10; *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF&#10; *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10; */&#10;&#10;/** A grammar for ANTLR v4 written in ANTLR v4.&#10;*/&#10;parser grammar ANTLRv4Parser;&#10;&#10;options {&#10;&#9;tokenVocab=ANTLRv4Lexer;&#10;}&#10;&#10;// The main entry point for parsing a v4 grammar.&#10;grammarSpec&#10;&#9;:&#9;DOC_COMMENT?&#10;&#9;&#9;grammarType id SEMI&#10;&#9;&#9;prequelConstruct*&#10;&#9;&#9;rules&#10;&#9;&#9;modeSpec*&#10;&#9;&#9;EOF&#10;&#9;;&#10;&#10;grammarType&#10;&#9;:&#9;(&#9;LEXER GRAMMAR&#10;&#9;&#9;|&#9;PARSER GRAMMAR&#10;&#9;&#9;|&#9;GRAMMAR&#10;&#9;&#9;)&#10;&#9;;&#10;&#10;// This is the list of all constructs that can be declared before&#10;// the set of rules that compose the grammar, and is invoked 0..n&#10;// times by the grammarPrequel rule.&#10;prequelConstruct&#10;&#9;:&#9;optionsSpec&#10;&#9;|&#9;delegateGrammars&#10;&#9;|&#9;tokensSpec&#10;&#9;|&#9;action&#10;&#9;;&#10;&#10;// A list of options that affect analysis and/or code generation&#10;optionsSpec&#10;&#9;:&#9;OPTIONS (option SEMI)* RBRACE&#10;&#9;;&#10;&#10;option&#10;&#9;:&#9;id ASSIGN optionValue&#10;&#9;;&#10;&#10;optionValue&#10;&#9;:&#9;id (DOT id)*&#10;&#9;|&#9;STRING_LITERAL&#10;&#9;|&#9;ACTION&#10;&#9;|&#9;INT&#10;&#9;;&#10;&#10;delegateGrammars&#10;&#9;:&#9;IMPORT delegateGrammar (COMMA delegateGrammar)* SEMI&#10;&#9;;&#10;&#10;delegateGrammar&#10;&#9;:&#9;id ASSIGN id&#10;&#9;|&#9;id&#10;&#9;;&#10;&#10;tokensSpec&#10;&#9;:&#9;TOKENS id (COMMA id)* COMMA? RBRACE&#10;&#9;;&#10;&#10;/** Match stuff like @parser::members {int i;} */&#10;action&#10;&#9;:&#9;AT (actionScopeName COLONCOLON)? id ACTION&#10;&#9;;&#10;&#10;/** Sometimes the scope names will collide with keywords; allow them as&#10; *  ids for action scopes.&#10; */&#10;actionScopeName&#10;&#9;:&#9;id&#10;&#9;|&#9;LEXER&#10;&#9;|&#9;PARSER&#10;&#9;;&#10;&#10;modeSpec&#10;&#9;:&#9;MODE id SEMI lexerRule*&#10;&#9;;&#10;&#10;rules&#10;&#9;:&#9;ruleSpec*&#10;&#9;;&#10;&#10;ruleSpec&#10;&#9;:&#9;parserRuleSpec&#10;&#9;|&#9;lexerRule&#10;&#9;;&#10;&#10;parserRuleSpec&#10;&#9;:&#9;DOC_COMMENT?&#10;        ruleModifiers? RULE_REF ARG_ACTION?&#10;        ruleReturns? throwsSpec? localsSpec?&#10;&#9;&#9;rulePrequel*&#10;&#9;&#9;COLON&#10;            ruleBlock&#10;&#9;&#9;SEMI&#10;&#9;&#9;exceptionGroup&#10;&#9;;&#10;&#10;exceptionGroup&#10;&#9;:&#9;exceptionHandler* finallyClause?&#10;&#9;;&#10;&#10;exceptionHandler&#10;&#9;:&#9;CATCH ARG_ACTION ACTION&#10;&#9;;&#10;&#10;finallyClause&#10;&#9;:&#9;FINALLY ACTION&#10;&#9;;&#10;&#10;rulePrequel&#10;&#9;:&#9;optionsSpec&#10;&#9;|&#9;ruleAction&#10;&#9;;&#10;&#10;ruleReturns&#10;&#9;:&#9;RETURNS ARG_ACTION&#10;&#9;;&#10;&#10;throwsSpec&#10;&#9;:&#9;THROWS id (COMMA id)*&#10;&#9;;&#10;&#10;localsSpec&#10;&#9;:&#9;LOCALS ARG_ACTION&#10;&#9;;&#10;&#10;/** Match stuff like @init {int i;} */&#10;ruleAction&#10;&#9;:&#9;AT id ACTION&#10;&#9;;&#10;&#10;ruleModifiers&#10;&#9;:&#9;ruleModifier+&#10;&#9;;&#10;&#10;// An individual access modifier for a rule. The 'fragment' modifier&#10;// is an internal indication for lexer rules that they do not match&#10;// from the input but are like subroutines for other lexer rules to&#10;// reuse for certain lexical patterns. The other modifiers are passed&#10;// to the code generation templates and may be ignored by the template&#10;// if they are of no use in that language.&#10;ruleModifier&#10;&#9;:&#9;PUBLIC&#10;&#9;|&#9;PRIVATE&#10;&#9;|&#9;PROTECTED&#10;&#9;|&#9;FRAGMENT&#10;&#9;;&#10;&#10;ruleBlock&#10;&#9;:&#9;ruleAltList&#10;&#9;;&#10;&#10;ruleAltList&#10;&#9;:&#9;labeledAlt (OR labeledAlt)*&#10;&#9;;&#10;&#10;labeledAlt&#10;&#9;:&#9;alternative (POUND id)?&#10;&#9;;&#10;&#10;lexerRule&#10;&#9;:&#9;DOC_COMMENT? FRAGMENT?&#10;&#9;&#9;TOKEN_REF COLON lexerRuleBlock SEMI&#10;&#9;;&#10;&#10;lexerRuleBlock&#10;&#9;:&#9;lexerAltList&#10;&#9;;&#10;&#10;lexerAltList&#10;&#9;:&#9;lexerAlt (OR lexerAlt)*&#10;&#9;;&#10;&#10;lexerAlt&#10;&#9;:&#9;lexerElements lexerCommands?&#10;&#9;|&#10;&#9;;&#10;&#10;lexerElements&#10;&#9;:&#9;lexerElement+&#10;&#9;;&#10;&#10;lexerElement&#10;&#9;:&#9;labeledLexerElement ebnfSuffix?&#10;&#9;|&#9;lexerAtom ebnfSuffix?&#10;&#9;|&#9;lexerBlock ebnfSuffix?&#10;&#9;|&#9;ACTION QUESTION? // actions only allowed at end of outer alt actually,&#10;                         // but preds can be anywhere&#10;&#9;;&#10;&#10;labeledLexerElement&#10;&#9;:&#9;id (ASSIGN|PLUS_ASSIGN)&#10;&#9;&#9;(&#9;lexerAtom&#10;&#9;&#9;|&#9;block&#10;&#9;&#9;)&#10;&#9;;&#10;&#10;lexerBlock&#10;&#9;:&#9;LPAREN lexerAltList RPAREN&#10;&#9;;&#10;&#10;// E.g., channel(HIDDEN), skip, more, mode(INSIDE), push(INSIDE), pop&#10;lexerCommands&#10;&#9;:&#9;RARROW lexerCommand (COMMA lexerCommand)*&#10;&#9;;&#10;&#10;lexerCommand&#10;&#9;:&#9;lexerCommandName LPAREN lexerCommandExpr RPAREN&#10;&#9;|&#9;lexerCommandName&#10;&#9;;&#10;&#10;lexerCommandName&#10;&#9;:&#9;id&#10;&#9;|&#9;MODE&#10;&#9;;&#10;&#10;lexerCommandExpr&#10;&#9;:&#9;id&#10;&#9;|&#9;INT&#10;&#9;;&#10;&#10;altList&#10;&#9;:&#9;alternative (OR alternative)*&#10;&#9;;&#10;&#10;alternative&#10;&#9;:&#9;elementOptions? element*&#10;&#9;;&#10;&#10;element&#10;&#9;:&#9;labeledElement&#10;&#9;&#9;(&#9;ebnfSuffix&#10;&#9;&#9;|&#10;&#9;&#9;)&#10;&#9;|&#9;atom&#10;&#9;&#9;(&#9;ebnfSuffix&#10;&#9;&#9;|&#10;&#9;&#9;)&#10;&#9;|&#9;ebnf&#10;&#9;|&#9;ACTION QUESTION? // SEMPRED is ACTION followed by QUESTION&#10;&#9;;&#10;&#10;labeledElement&#10;&#9;:&#9;id (ASSIGN|PLUS_ASSIGN)&#10;&#9;&#9;(&#9;atom&#10;&#9;&#9;|&#9;block&#10;&#9;&#9;)&#10;&#9;;&#10;&#10;ebnf:&#9;block blockSuffix?&#10;&#9;;&#10;&#10;blockSuffix&#10;&#9;:&#9;ebnfSuffix // Standard EBNF&#10;&#9;;&#10;&#10;ebnfSuffix&#10;&#9;:&#9;QUESTION QUESTION?&#10;  &#9;|&#9;STAR QUESTION?&#10;   &#9;|&#9;PLUS QUESTION?&#10;&#9;;&#10;&#10;lexerAtom&#10;&#9;:&#9;range&#10;&#9;|&#9;terminal&#10;&#9;|&#9;RULE_REF&#10;&#9;|&#9;notSet&#10;&#9;|&#9;LEXER_CHAR_SET&#10;&#9;|&#9;DOT elementOptions?&#10;&#9;;&#10;&#10;atom&#10;&#9;:&#9;range // Range x..y - only valid in lexers&#10;&#9;|&#9;terminal&#10;&#9;|&#9;ruleref&#10;&#9;|&#9;notSet&#10;&#9;|&#9;DOT elementOptions?&#10;&#9;;&#10;&#10;notSet&#10;&#9;:&#9;NOT setElement&#10;&#9;|&#9;NOT blockSet&#10;&#9;;&#10;&#10;blockSet&#10;&#9;:&#9;LPAREN setElement (OR setElement)* RPAREN&#10;&#9;;&#10;&#10;setElement&#10;&#9;:&#9;TOKEN_REF elementOptions?&#10;&#9;|&#9;STRING_LITERAL elementOptions?&#10;&#9;|&#9;range&#10;&#9;|&#9;LEXER_CHAR_SET&#10;&#9;;&#10;&#10;block&#10;&#9;:&#9;LPAREN&#10;&#9;&#9;( optionsSpec? ruleAction* COLON )?&#10;&#9;&#9;altList&#10;&#9;&#9;RPAREN&#10;&#9;;&#10;&#10;ruleref&#10;&#9;:&#9;RULE_REF ARG_ACTION? elementOptions?&#10;&#9;;&#10;&#10;range&#10;&#9;: STRING_LITERAL RANGE STRING_LITERAL&#10;&#9;;&#10;&#10;terminal&#10;&#9;:   TOKEN_REF elementOptions?&#10;&#9;|   STRING_LITERAL elementOptions?&#10;&#9;;&#10;&#10;// Terminals may be adorned with certain options when&#10;// reference in the grammar: TOK&lt;,,,&gt;&#10;elementOptions&#10;&#9;:&#9;LT elementOption (COMMA elementOption)* GT&#10;&#9;;&#10;&#10;elementOption&#10;&#9;:&#9;// This format indicates the default node option&#10;&#9;&#9;id&#10;&#9;|&#9;// This format indicates option assignment&#10;&#9;&#9;id ASSIGN (id | STRING_LITERAL)&#10;&#9;;&#10;&#10;id&#9;:&#9;RULE_REF&#10;&#9;|&#9;TOKEN_REF&#10;&#9;;&#10;" />
    <option name="blockRefDividerLocation" value="435" />
  </component>
  <component name="RefactoringSettings">
    <option name="RENAME_SEARCH_IN_COMMENTS_FOR_CLASS" value="false" />
    <option name="RENAME_SEARCH_IN_COMMENTS_FOR_FIELD" value="false" />
    <option name="RENAME_SEARCH_FOR_TEXT_FOR_CLASS" value="false" />
    <option name="RENAME_SEARCH_FOR_TEXT_FOR_FIELD" value="false" />
    <option name="MOVE_PREVIEW_USAGES" value="false" />
    <option name="INTRODUCE_LOCAL_CREATE_FINALS" value="false" />
  </component>
  <component name="SvnApplicationSettings">
    <option name="mySvnCommandLine" value="/usr/local/bin/svn" />
  </component>
  <component name="com.intellij.ide.fileTemplates.impl.FileTemplateManagerImpl">
    <recent_templates>
      <option name="RECENT_TEMPLATES">
        <value>
          <list size="0" />
        </value>
      </option>
    </recent_templates>
  </component>
  <component name="com.intellij.openapi.diff.impl.external.DiffManagerImpl" COMPARISON_POLICY="Default" HIGHLIGHT_MODE="BY_WORD" />
</application>